import{_ as s,c as a,f as e,o as t}from"./app-DPbWGEph.js";const p={};function o(l,n){return t(),a("div",null,n[0]||(n[0]=[e(`<h1 id="gateway-pattern" tabindex="-1"><a class="header-anchor" href="#gateway-pattern"><span>Gateway Pattern</span></a></h1><p>During development of large projects with multiple frameworks and dependencies, it&#39;s very important to distinguish domain code from code that depends on external code.</p><p>My personal recommendation would be to encapsulate almost every external library that can be potentially replaced (eg. with <a href="https://en.wikipedia.org/wiki/Strategy_pattern" target="_blank" rel="noopener noreferrer"><em>Strategy pattern</em>. wikipedia</a>), its interface isn&#39;t well designed or simply we would like to mock. I would like to show how <code>Gateway Pattern</code> (<a href="https://martinfowler.com/eaaCatalog/gateway.html" target="_blank" rel="noopener noreferrer">Martin Fowler. <em>Gateway</em></a>) can be used for encapsulating on the example of <code>requests</code> library.</p><h2 id="describing-the-problem" tabindex="-1"><a class="header-anchor" href="#describing-the-problem"><span>Describing the problem</span></a></h2><p>Let&#39;s consider following service class consuming external REST API.</p><div class="language-python" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">from</span> dataclasses <span class="token keyword">import</span> dataclass</span>
<span class="line"><span class="token keyword">from</span> typing <span class="token keyword">import</span> Dict</span>
<span class="line"><span class="token keyword">import</span> json</span>
<span class="line"><span class="token keyword">import</span> requests</span>
<span class="line"></span>
<span class="line"><span class="token decorator annotation punctuation">@dataclass</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">KVService</span><span class="token punctuation">:</span></span>
<span class="line">    hostname<span class="token punctuation">:</span> <span class="token builtin">str</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">_get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> endpoint<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> Dict<span class="token punctuation">:</span></span>
<span class="line">        response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;https://</span><span class="token interpolation"><span class="token punctuation">{</span>self<span class="token punctuation">.</span>hostname<span class="token punctuation">}</span></span><span class="token string">/</span><span class="token interpolation"><span class="token punctuation">{</span>endpoint<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span> response<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">get_metadata</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> Dict<span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">return</span> self<span class="token punctuation">.</span>_get<span class="token punctuation">(</span><span class="token string">&quot;metadata&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">get_kv</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> key<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> Dict<span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">return</span> self<span class="token punctuation">.</span>_get<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;kv/</span><span class="token interpolation"><span class="token punctuation">{</span>key<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre></div><p>What if we would like to test our two public methods <code>get_metadata(...)</code> and <code>get_kv(...)</code> as they provide some minimal business logic? We would need to set up our KVService first at <code>https://{hostname}</code> address and mock <code>requests.get(...)</code> method. What if there are more classes like that in our codebase and were using <code>requests</code> library in multiple places?</p><p>There&#39;s a great way to mock http servers in Python described in <a href="https://realpython.com/testing-third-party-apis-with-mock-servers/#testing-the-mock-api" target="_blank" rel="noopener noreferrer"><em>Testing External APIs With Mock Servers</em>. Real Python</a>, but do we want to repeat that code for every client-side stub we create? What if we would like to switch to other requests library in the future if there we&#39;ll be a better one?</p><p>In real world it may also happen that you&#39;ll be out of your ideas how to mock external library for now and you would rather take a loan on technical debt account and test only the code that is in your control.</p><h2 id="encapsulating-external-dependencies" tabindex="-1"><a class="header-anchor" href="#encapsulating-external-dependencies"><span>Encapsulating external dependencies</span></a></h2><p>The simple solution that suits very well in OOP and DDD world is to create a <code>gateway</code> class that embedds usage of the external library. In my case, it would simply be a class that have a very simple interface, ie. <code>get(endpoint: str)</code> method.</p><div class="language-python" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">from</span> dataclasses <span class="token keyword">import</span> dataclass</span>
<span class="line"><span class="token keyword">from</span> typing <span class="token keyword">import</span> Dict</span>
<span class="line"><span class="token keyword">import</span> json</span>
<span class="line"><span class="token keyword">import</span> requests</span>
<span class="line"></span>
<span class="line"><span class="token decorator annotation punctuation">@dataclass</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">Server</span><span class="token punctuation">:</span></span>
<span class="line">    hostname<span class="token punctuation">:</span> <span class="token builtin">str</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> endpoint<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> Dict<span class="token punctuation">:</span></span>
<span class="line">        response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;https://</span><span class="token interpolation"><span class="token punctuation">{</span>self<span class="token punctuation">.</span>hostname<span class="token punctuation">}</span></span><span class="token string">/</span><span class="token interpolation"><span class="token punctuation">{</span>endpoint<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span> response<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre></div><p>Now, our <code>KVService</code> class in a separate file will look like this.</p><div class="language-python" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">from</span> dataclasses <span class="token keyword">import</span> dataclass</span>
<span class="line"><span class="token keyword">from</span> typing <span class="token keyword">import</span> Dict</span>
<span class="line"><span class="token keyword">from</span> my_package <span class="token keyword">import</span> Server</span>
<span class="line"></span>
<span class="line"><span class="token decorator annotation punctuation">@dataclass</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">KVService</span><span class="token punctuation">:</span></span>
<span class="line">    server<span class="token punctuation">:</span> Server</span>
<span class="line"></span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">get_metadata</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> Dict<span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">return</span> self<span class="token punctuation">.</span>server<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&quot;metadata&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">get_kv</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> key<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> Dict<span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">return</span> self<span class="token punctuation">.</span>server<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;kv/</span><span class="token interpolation"><span class="token punctuation">{</span>key<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre></div><p>Our class <code>KVService</code> doesn&#39;t have a dependency on <code>requests</code> nor a presence of <code>https://{hostname}</code> REST service anymore.</p><h2 id="testing" tabindex="-1"><a class="header-anchor" href="#testing"><span>Testing</span></a></h2><p>Let&#39;s see how easily we can test the logic of <code>KVService</code> class now.</p><div class="language-python" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">from</span> pytest <span class="token keyword">import</span> fixture</span>
<span class="line"><span class="token keyword">from</span> my_package <span class="token keyword">import</span> Server</span>
<span class="line"></span>
<span class="line"><span class="token decorator annotation punctuation">@fixture</span></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">server</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    server <span class="token operator">=</span> Server<span class="token punctuation">(</span>hostname<span class="token operator">=</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    server<span class="token punctuation">.</span>get <span class="token operator">=</span> <span class="token keyword">lambda</span> key<span class="token punctuation">:</span> key</span>
<span class="line">    <span class="token keyword">return</span> server</span>
<span class="line"></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">test_kv_service</span><span class="token punctuation">(</span>server<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    kv_service <span class="token operator">=</span> KVService<span class="token punctuation">(</span>server<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">assert</span> kv_service<span class="token punctuation">.</span>get_kv<span class="token punctuation">(</span><span class="token string">&quot;aaa&quot;</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">&quot;kv/aaa&quot;</span></span>
<span class="line">    <span class="token keyword">assert</span> kv_service<span class="token punctuation">.</span>get_metadata<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">&quot;metadata&quot;</span></span>
<span class="line"></span></code></pre></div><p>There are at least few definitions of unit and integrations tests, eg. <a href="https://martinfowler.com/articles/practical-test-pyramid.html" target="_blank" rel="noopener noreferrer">Ham Vocke. <em>The Practical Test Pyramid</em>. 2018</a>. I&#39;m not a huge fan of unit tests in classic definition where we mock all dependencies of a given class. In reality it creates a lot of boilerplate code that bind us to a given implementation (<a href="https://blog.arkency.com/2014/09/unit-tests-vs-class-tests/" target="_blank" rel="noopener noreferrer">Andrzej Krzywda. <em>Unit tests vs class tests</em>. 2014.</a>). Instead, I rather try to design and test my code by domain units usually composed of multiple classes with well designed public interfaces. In that case, if we use gateway pattern to keep external dependencies out of our domain code, it will be much easier to create unit or integration tests for testing our domain code.</p><h2 id="summary" tabindex="-1"><a class="header-anchor" href="#summary"><span>Summary</span></a></h2><p>I hope that above example shows that encapsulating external dependencies using additional class makes our codebase less dependent on external code and makes it easier to test. If we design interface of our gateway classes properly, we&#39;ll be able to replace external libraries very easily and keep our domain codebase with its unit/integration tests untouched.</p><h2 id="references" tabindex="-1"><a class="header-anchor" href="#references"><span>References</span></a></h2><ul><li><a href="https://en.wikipedia.org/wiki/Strategy_pattern" target="_blank" rel="noopener noreferrer"><em>Strategy pattern</em>. wikipedia</a>,</li><li><a href="https://martinfowler.com/eaaCatalog/gateway.html" target="_blank" rel="noopener noreferrer">Fowler, Martin. <em>Gateway</em></a>,</li><li>Fowler, Martin. <em>Patterns of Enterprise Application Architecture</em>. 2002,</li><li><a href="https://realpython.com/testing-third-party-apis-with-mock-servers/#testing-the-mock-api" target="_blank" rel="noopener noreferrer"><em>Testing External APIs With Mock Servers</em>. Real Python</a>,</li><li><a href="https://martinfowler.com/articles/practical-test-pyramid.html" target="_blank" rel="noopener noreferrer">Vocke, Ham. <em>The Practical Test Pyramid</em>. 2018</a>,</li><li><a href="https://blog.arkency.com/2014/09/unit-tests-vs-class-tests/" target="_blank" rel="noopener noreferrer">Krzywda, Andrzej. <em>Unit tests vs class tests</em>. 2014</a>.</li></ul><p><em>Article originally written 2021.02.07</em></p>`,24)]))}const c=s(p,[["render",o],["__file","index.html.vue"]]),i=JSON.parse(`{"path":"/post/2021/02/07/gateway-pattern/","title":"Gateway Pattern","lang":"en-US","frontmatter":{"permalinkPattern":"/post/:year/:month/:day/:slug/","date":"2021-02-07T00:00:00.000Z","tag":["Python","design patterns","testing"],"author":"Piotr Przetacznik","sidebar":"heading","location":"Kraków"},"headers":[{"level":2,"title":"Describing the problem","slug":"describing-the-problem","link":"#describing-the-problem","children":[]},{"level":2,"title":"Encapsulating external dependencies","slug":"encapsulating-external-dependencies","link":"#encapsulating-external-dependencies","children":[]},{"level":2,"title":"Testing","slug":"testing","link":"#testing","children":[]},{"level":2,"title":"Summary","slug":"summary","link":"#summary","children":[]},{"level":2,"title":"References","slug":"references","link":"#references","children":[]}],"git":{"updatedTime":1736687039000},"filePathRelative":"_posts/2021-02-07-gateway-pattern.md","excerpt":"\\n<p>During development of large projects with multiple frameworks and dependencies, it's very important to distinguish domain code from code that depends on external code.</p>\\n<p>My personal recommendation would be to encapsulate almost every external library that can be potentially replaced (eg. with <a href=\\"https://en.wikipedia.org/wiki/Strategy_pattern\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\"><em>Strategy pattern</em>. wikipedia</a>), its interface isn't well designed or simply we would like to mock. I would like to show how <code>Gateway Pattern</code> (<a href=\\"https://martinfowler.com/eaaCatalog/gateway.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Martin Fowler. <em>Gateway</em></a>) can be used for encapsulating on the example of <code>requests</code> library.</p>"}`);export{c as comp,i as data};
